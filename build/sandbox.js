!function(e){var t={};function n(r){if(t[r])return t[r].exports;var i=t[r]={i:r,l:!1,exports:{}};return e[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)n.d(r,i,function(t){return e[t]}.bind(null,i));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=5)}([function(module,exports){module.exports=function(e){var t={};function n(r){if(t[r])return t[r].exports;var i=t[r]={i:r,l:!1,exports:{}};return e[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}return n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)n.d(r,i,function(t){return e[t]}.bind(null,i));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=60)}([function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.isFunction=e=>"[object Function]"===toString.apply(e)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(0);t.callOrReturn=(e,...t)=>r.isFunction(e)?e(...t):e},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.isArray=e=>Array.isArray(e)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.isString=e=>"string"==typeof e},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.isObject=e=>"[object Object]"===toString.apply(e)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(10),i=n(12);t.isLength=e=>r.isInteger(e)&&i.isBetween(0,Number.MAX_SAFE_INTEGER,e)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(4),i=n(2);t.decycle=e=>{const t=[],n=[],s=(e,o="$")=>{if(r.isObject(e)||i.isArray(e)){for(let r=0;r<t.length;r++)if(e===t[r])return n[r];t.push(e),n.push({$ref:o})}for(let t in e)(r.isObject(e[t])||i.isArray(e[t]))&&(e[t]=s(e[t],`${o}.${t}`));return i.isArray(e)?e.sort():e};return s(e)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.isRealNaN=e=>"number"==typeof e&&isNaN(e)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(2),i=n(9),s=n(13),o=n(3),a=n(14);t.makeSureItsAnArray=e=>r.isArray(e)?e:a.isUndefined(e)?[]:o.isString(e)||!i.isArrayLike(e)&&!s.isIterable(e)?[e]:Array.from(e)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(5);t.isArrayLike=e=>e&&"function"!=typeof e&&r.isLength(e.length)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(11);t.isInteger=e=>r.isNumber(e)&&e%1==0},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.isNumber=e=>"number"==typeof e&&!isNaN(e)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.isBetween=function(e,t,n){return n>=e&&n<=t}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.isIterable=e=>null!=e&&"function"==typeof e[Symbol.iterator]},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.isUndefined=e=>void 0===e},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.isType=(e,t)=>typeof t==e},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.isMap=e=>e instanceof Map},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(4),i=n(2),s=n(18),o=/(?:\$)?\.?(.+)\.{0,}/,a=(e,t)=>{const n=o.exec(t),r=s.get(n,"1");return s.get(e,r)||e};t.undecycle=e=>{const t=n=>{for(let s in n)(r.isObject(n[s])||i.isArray(n[s]))&&(n[s].$ref?n[s]=a(e,n[s].$ref):n[s]=t(n[s]));return n};return t(e)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(3);t.get=(e,t)=>{r.isString(t)&&(t=t.split("."));const n=(e,t,r=0)=>r===t.length-1?e[t[r]]:t[r]&&e[t[r]]?n(e[t[r]],t,++r):void 0;return n(e,t)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.makeID=(e=8,t="",n="",r="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789_")=>{for(let i=0;i<e-(n.length+1);i++)t+=r.charAt(Math.floor(Math.random()*r.length));return t+n}},function(e,t,n){"use strict";function r(e){for(var n in e)t.hasOwnProperty(n)||(t[n]=e[n])}Object.defineProperty(t,"__esModule",{value:!0}),r(n(21)),r(n(22)),r(n(23)),r(n(24)),r(n(25));const i=n(21),s=n(22),o=n(23),a=n(24),u=n(25);t.arr={clean:i.clean,every:s.every,next:o.next,previous:a.previous,unique:u.unique},t.default=t.arr},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(0),i=n(7);t.clean=(e,t)=>r.isFunction(e)?t.filter(t=>!e(t)):t.filter(t=>!(i.isRealNaN(e)&&i.isRealNaN(t)||t===e))},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(8);t.every=(e,t)=>{t=r.makeSureItsAnArray(t);for(let n=0;n<t.length;n++)if(!e(t[n]))return!1;return!0}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(0);t.next=(e,t,n=(e=>!!e))=>{if(r.isFunction(n)){for(let r=t+1;r<e.length;r++)if(n(e[r]))return{val:e[r],idx:r}}else for(let r=t+1;r<e.length;r++)if(e[r]===n)return{val:e[r],idx:r};return{val:void 0,idx:-1}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(0);t.previous=(e,t,n=(e=>!!e))=>{if(r.isFunction(n)){for(let r=t-1;r>=0;r--)if(n(e[r]))return{val:e[r],idx:r}}else for(let r=t-1;r>=0;r--)if(e[r]===n)return{val:e[r],idx:r};return{val:void 0,idx:-1}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.unique=(...e)=>Array.from(new Set([].concat(...e)))},function(e,t,n){"use strict";function r(e){for(var n in e)t.hasOwnProperty(n)||(t[n]=e[n])}Object.defineProperty(t,"__esModule",{value:!0}),r(n(27)),r(n(28)),r(n(29)),r(n(30));const i=n(27),s=n(28),o=n(29),a=n(30);t.async={delay:i.delay,filter:s.filter,forEach:o.forEach,map:a.map},t.default=t.async},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.delay=async e=>new Promise(t=>setTimeout(()=>t(!0),1e3*e))},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.filter=async(e,t)=>{const n=[];for(let r=0;r<t.length;r++)!0===await e(t[r],r,t)&&n.push(t[r]);return n}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.forEach=async(e,t)=>{for(let n=0;n<t.length;n++)await e(t[n],n,t)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.map=async(e,t)=>{const n=[];for(let r=0;r<t.length;r++)n.push(await e(t[r],r,t));return n}},function(e,t,n){"use strict";function r(e){for(var n in e)t.hasOwnProperty(n)||(t[n]=e[n])}Object.defineProperty(t,"__esModule",{value:!0}),r(n(1)),r(n(32)),r(n(33));const i=n(1),s=n(32),o=n(33);t.fn={callOrReturn:i.callOrReturn,curry:s.curry,maybeCall:o.maybeCall},t.default=t.fn},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.curry=(e,t)=>{const n=(t,r)=>i=>t-1<=0?e(...r,i):n(t-1,[...r,i]);return n(t||e.length,[])}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(0);t.maybeCall=(e,...t)=>!!r.isFunction(e)&&e(...t)},function(e,t,n){"use strict";function r(e){for(var n in e)t.hasOwnProperty(n)||(t[n]=e[n])}Object.defineProperty(t,"__esModule",{value:!0}),r(n(2)),r(n(9)),r(n(12)),r(n(35)),r(n(0)),r(n(36)),r(n(10)),r(n(13)),r(n(5)),r(n(16)),r(n(37)),r(n(11)),r(n(38)),r(n(4)),r(n(7)),r(n(39)),r(n(3)),r(n(15)),r(n(14));const i=n(2),s=n(9),o=n(12),a=n(35),u=n(0),l=n(36),c=n(10),d=n(13),f=n(5),p=n(16),y=n(37),b=n(11),v=n(38),_=n(4),m=n(7),h=n(39),g=n(3),O=n(15),M=n(14);t.is={isArray:i.isArray,isArrayLike:s.isArrayLike,isBetween:o.isBetween,isBool:a.isBool,isFunction:u.isFunction,isInstanceOf:l.isInstanceOf,isInteger:c.isInteger,isIterable:d.isIterable,isLength:f.isLength,isMap:p.isMap,isNull:y.isNull,isNumber:b.isNumber,isNumberish:v.isNumberish,isObject:_.isObject,isRealNaN:m.isRealNaN,isScalar:h.isScalar,isString:g.isString,isType:O.isType,isUndefined:M.isUndefined},t.default=t.is},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.isBool=e=>"boolean"==typeof e},function(module,exports,__webpack_require__){"use strict";Object.defineProperty(exports,"__esModule",{value:!0});const isType_1=__webpack_require__(15);exports.isInstanceOf=(type,val)=>{try{return val instanceof eval(type)||isType_1.isType(type,val)}catch(e){return!1}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.isNull=e=>null===e},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.isNumberish=e=>!isNaN(e)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.isScalar=e=>["boolean","number","string"].includes(typeof e)},function(e,t,n){"use strict";function r(e){for(var n in e)t.hasOwnProperty(n)||(t[n]=e[n])}Object.defineProperty(t,"__esModule",{value:!0}),r(n(41)),r(n(42)),r(n(43));const i=n(41),s=n(42),o=n(43);t.logic={and:i.and,or:s.or,xor:o.xor},t.default=t.logic},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(1);t.and=(...e)=>{let t=0;for(let n=0;n<e.length;n++)r.callOrReturn(e[n])&&t++;return t===e.length}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(1);t.or=(...e)=>{for(let t=0;t<e.length;t++)if(r.callOrReturn(e[t]))return!0;return!1}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(1);t.xor=(...e)=>{let t=0;for(let n=0;n<e.length;n++)r.callOrReturn(e[n])&&t++;return 1===t}},function(e,t,n){"use strict";function r(e){for(var n in e)t.hasOwnProperty(n)||(t[n]=e[n])}Object.defineProperty(t,"__esModule",{value:!0}),r(n(45)),r(n(46)),r(n(47)),r(n(48));const i=n(45),s=n(46),o=n(47),a=n(48);t.num={clamp:i.clamp,scale:s.scale,randomInt:o.randomInt,randomNumber:a.randomNumber},t.default=t.num},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.clamp=(e,t,n)=>n<=e?e:n>=t?t:n},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.scale=(e,t,n,r,i)=>(i-r)/(n-t)*(e-n)+i},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.randomInt=(e=Number.MIN_SAFE_INTEGER,t=Number.MAX_SAFE_INTEGER)=>Math.floor(Math.random()*(t-e+1))+e},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.randomNumber=(e=0,t=10)=>Math.random()*(t-e)+e},function(e,t,n){"use strict";function r(e){for(var n in e)t.hasOwnProperty(n)||(t[n]=e[n])}Object.defineProperty(t,"__esModule",{value:!0}),r(n(50)),r(n(6)),r(n(51)),r(n(18)),r(n(52)),r(n(53)),r(n(17));const i=n(50),s=n(6),o=n(51),a=n(18),u=n(52),l=n(53),c=n(17);t.obj={clone:i.clone,decycle:s.decycle,equal:o.equal,get:a.get,set:u.set,sizeOf:l.sizeOf,undecycle:c.undecycle},t.default=t.obj},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(6),i=n(17);t.clone=e=>i.undecycle(JSON.parse(JSON.stringify(r.decycle(e))))},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(6);t.equal=(e,t)=>e===t||JSON.stringify(r.decycle(e))===JSON.stringify(r.decycle(t))},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(3);t.set=(e,t,n)=>{r.isString(t)&&(t=t.split("."));const i=(e,t,n,r=0)=>{let s=String(t[r]);return r==t.length-1?e[s]=n:(void 0===e[s]&&(e[s]={}),i(e[s],t,n,++r),!0)};return i(e,t,n)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(4),i=n(5),s=n(16);t.sizeOf=e=>{if(e){if(i.isLength(e.length))return e.length;if(s.isMap(e))return e.size;if(r.isObject(e))return Object.keys(e).length}return 0}},function(e,t,n){"use strict";function r(e){for(var n in e)t.hasOwnProperty(n)||(t[n]=e[n])}Object.defineProperty(t,"__esModule",{value:!0}),r(n(55)),r(n(19)),r(n(56)),r(n(57));const i=n(55),s=n(19),o=n(56),a=n(57);t.str={insert:i.insert,makeID:s.makeID,randomColour:o.randomColour,remove:a.remove},t.default=t.str},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.insert=(e,t,n)=>[t.slice(0,n),String(e),t.slice(n)].join("")},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(19);t.randomColour=()=>r.makeID(7,"#","","0123456789ABCDEF")},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.remove=(e,t,n)=>e.slice(0,t)+e.slice(t+n)},function(e,t,n){"use strict";function r(e){for(var n in e)t.hasOwnProperty(n)||(t[n]=e[n])}Object.defineProperty(t,"__esModule",{value:!0}),r(n(8)),r(n(59));const i=n(8),s=n(59);t.util={makeSureItsAnArray:i.makeSureItsAnArray,times:s.times},t.default=t.util},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(1);t.times=(e,t)=>{const n=[];for(let i=0;i<t;i++)n[i]=r.callOrReturn(e,i);return n}},function(e,t,n){"use strict";function r(e){for(var n in e)t.hasOwnProperty(n)||(t[n]=e[n])}Object.defineProperty(t,"__esModule",{value:!0}),r(n(20)),r(n(26)),r(n(31)),r(n(34)),r(n(40)),r(n(44)),r(n(49)),r(n(54)),r(n(58));const i=n(20),s=n(26),o=n(31),a=n(34),u=n(40),l=n(44),c=n(49),d=n(54),f=n(58),p=Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({},i.default),s.default),o.default),a.default),u.default),l.default),c.default),d.default),f.default);t.default=p}])},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(2),i=n(16),s=n(4),o=n(0),a=e=>{if(e instanceof Node){const t=e;return t.DOM=t.DOM||(()=>({data:new Map,def:{},event:{subscriptions:[],onEvent:[]},on:{}}))(),t}return t.dom(e).element};t.dom=e=>{if(s.isDom(e))return e;let t=[];return e&&(s.isNode(e)?t[0]=a(e):o.isString(e)?t=o.makeSureItsAnArray(document.querySelectorAll(e)).map(a):o.isArrayLike(e)?t=o.makeSureItsAnArray(e).map(a):o.isObject(e)&&(t[0]=i.create(e))),Object.create(r.DOM,{list:{value:t,writable:!1},element:{value:t[0],writable:!1},initiator:{value:e,writable:!1},exists:{value:t.length>0,writable:!1},isAppended:{get:function(){return document.body.contains(this.element)}}})},t.default=t.dom},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(6),i=n(7),s=n(8),o=n(9),a=n(10),u=n(11),l=n(13),c=n(14),d=n(15);t.DOM={child:d.runAndReturnFactory(r.selection.child),parent:d.runAndReturnFactory(r.selection.parent),sibling:d.runAndReturnFactory(r.selection.sibling),attr:d.runAndReturnFactory(i.attribute.attr),data:d.runAndReturnFactory(i.attribute.data),disable:d.runFactory(i.attribute.disable),enable:d.runFactory(i.attribute.enable),id:d.runFactory(i.attribute.id),innerHTML:d.runAndReturnFactory(i.attribute.innerHTML),innerText:d.runAndReturnFactory(i.attribute.innerText),addClass:d.runFactory(s.classes.addClass),removeClass:d.runFactory(s.classes.removeClass),replaceClass:d.runFactory(s.classes.replaceClass),toggleClass:d.runFactory(s.classes.toggleClass),hasClass:d.runFactory(s.classes.hasClass),change:d.runFactory(o.event.change),click:d.runFactory(o.event.click),fireEvent:d.runFactory(o.event.fireEvent),on:d.runFactory(o.event.on),onEvent:d.runFactory(o.event.onEvent),sub:d.runFactory(o.event.sub),background:d.runAndReturnFactory(u.styles.background),backgroundColour:d.runAndReturnFactory(u.styles.backgroundColour),colour:d.runAndReturnFactory(u.styles.colour),height:d.runAndReturnFactory(u.styles.height),hide:d.runFactory(u.styles.hide),show:d.runFactory(u.styles.show),style:d.runAndReturnFactory(u.styles.style),width:d.runAndReturnFactory(u.styles.width),appendAfter:d.runFactory(a.insertion.appendAfter),appendBefore:d.runFactory(a.insertion.appendBefore),appendFirstChild:d.runFactory(a.insertion.appendFirstChild),appendLastChild:d.runFactory(a.insertion.appendLastChild),appendTo:d.runFactory(a.insertion.appendTo),empty:d.runFactory(a.insertion.empty),remove:d.runFactory(a.insertion.remove),replace:d.runFactory(a.insertion.replace),getBounding:d.runAndReturnFactory(l.viewport.getBounding),scrollMore:d.runFactory(l.viewport.scrollMore),scrollTop:d.runAndReturnFactory(l.viewport.scrollTop),deselect:d.runFactory(c.default.deselect),formValues:d.runFactory(c.default.formValues),dflt:d.runFactory(c.default.dflt),select:d.runFactory(c.default.select),updateSelect:d.runFactory(c.default.updateSelect),validate:d.runFactory(c.default.validate),value:d.runFactory(c.default.value),toString:function(){return"[object Dom]"}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),Error.stackTraceLimit=50;t.Dom_EventBus_Error=class extends Error{constructor(e){super(e),this.name=this.constructor.name,Error.captureStackTrace(this,this.constructor)}};t.Dom_Element_Definition_Error=class extends Error{constructor(e){super(e),this.name=this.constructor.name,Error.captureStackTrace(this,this.constructor)}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(2);t.isDom=e=>r.DOM.isPrototypeOf(e),t.isDomElement=e=>e.DOM,t.isNode=e=>e instanceof Node,t.isOption=e=>"OPTION"===e.tagName,t.isSelect=e=>"SELECT"===e.tagName},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(1);r.dom({span:["hello world "],style:{color:"red"}}).appendTo("body");const i=r.dom({input:"hello world",dflt:"eh?",style:{width:"10%"}}).appendTo("body");console.log(i),i.dflt()},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(1);t.child=(e,t)=>e&&e.querySelectorAll?r.default(e.querySelectorAll(t)):r.default([]),t.sibling=(e,t)=>{if(!e.parentNode||!t)return r.default([]);const n=e.parentNode.querySelectorAll(t),i=Array.from(n);return r.default(i.filter(t=>t!==e))},t.parent=(e,t)=>e&&e.closest?r.default(e.closest(t)):r.default([]),t.selection={child:t.child,sibling:t.sibling,parent:t.parent}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(3),i=n(0);t.attr=(e,t,n)=>!(!e.getAttribute||!e.setAttribute)&&(i.isUndefined(n)?e.getAttribute(t)||!1:void e.setAttribute(t,String(n))),t.data=(e,t,n)=>{if(i.isUndefined(n))return e.DOM.data.get(t)||!1;e.DOM.data.set(t,n)},t.disable=e=>e.disabled=!0,t.enable=e=>e.disabled=!1,t.id=(e,t)=>{if(t){if(t=t.replace("#",""),document.querySelectorAll(`#${t}`).length)throw new r.Dom_Element_Definition_Error(`ID [${t}] already exists in document.`);e.id=t}},t.innerHTML=(e,t)=>{if(i.isUndefined(t))return e.innerHTML;e.innerHTML=t},t.innerText=(e,t)=>{if(i.isUndefined(t))return e.innerText;e.innerText=t},t.attribute={attr:t.attr,data:t.data,disable:t.disable,enable:t.enable,id:t.id,innerHTML:t.innerHTML,innerText:t.innerText}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(0);t.classes={addClass:(e,t)=>{e.classList&&e.classList.add(...r.default.makeSureItsAnArray(t))},removeClass:(e,t)=>{e.classList&&e.classList.remove(...r.default.makeSureItsAnArray(t))},replaceClass:(e,t,n)=>{e.classList&&e.classList.replace(t,n)},toggleClass:(e,t)=>!!e.classList&&e.classList.toggle(t),hasClass:(e,t)=>!!e.classList&&e.classList.contains(t)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(1),i=n(3),s=n(0),o=(e,{event:t,topic:n,data:o,fn:a,stopPropagation:u=!1,preventDefault:l=!0,elementAsCtx:c=!0})=>{const d=r.dom(e);if(s.isFunction(a)&&(a=a.bind(e)),s.isFunction(o)&&(o=o.bind(e)),s.isFunction(a)&&["append"].includes(t.toLowerCase()))return void(e.DOM.on[t]=a);const f=async function(t){if(l&&t.preventDefault(),u&&t.stopPropagation(),s.isFunction(a)&&a(t),n)if(d.eventbus)d.eventbus.pub({topic:n,data:s.isFunction(o)?o(t):o,ctx:c?e:void 0});else if(!d.eventbus)throw new i.Dom_EventBus_Error("Not registered")};e.DOM.event.onEvent.push(f),e.addEventListener(t,f)},a=(e,t)=>{const n=document.createEvent("HTMLEvents");n.initEvent(t,!1,!0),e.dispatchEvent(n)};t.event={change:e=>a(e,"change"),click:e=>a(e,"click"),fireEvent:a,on:(e,t,n)=>o(e,{event:t,fn:n}),onEvent:o,sub:(e,{topic:t,fn:n,distinct:o,once:a,minInterval:u,description:l})=>{const c=r.dom(e);if(!c.eventbus)throw new i.Dom_EventBus_Error("Not registered");if(!t||!n||!s.isFunction(n))return;const d={topic:t,fn:n.bind(e),distinct:o||!1,once:a||!1,minInterval:u||0,description:l||""},f=c.eventbus.sub(d);e.DOM.event.subscriptions.push({subscription:d,token:f})}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(0),i=n(1);t.appendTo=(e,t)=>{const n=i.dom(t);n.list.length>0&&n.element.appendChild(e),r.isFunction(e.DOM.on.append)&&e.DOM.on.append({})},t.insert=(e,t,n)=>{let s=i.dom(n);s.element&&s.element.insertAdjacentElement&&s.element.insertAdjacentElement(t,e),r.isFunction(e.DOM.on.append)&&e.DOM.on.append({})},t.appendAfter=(e,n)=>t.insert(e,"afterend",n),t.appendBefore=(e,n)=>t.insert(e,"beforebegin",n),t.appendFirstChild=(e,n)=>t.insert(e,"afterbegin",n),t.appendLastChild=(e,n)=>t.insert(e,"beforeend",n),t.empty=e=>{Array.from(e.children).forEach(e=>{i.dom(e).remove()})},t.remove=(e,t)=>{const n=i.dom(e);(r.isString(t)?n.child(t).list:n.list).forEach(e=>{let t=r.makeSureItsAnArray(e.children);for(let e=t.length-1;e>=0;e--)i.dom(t[e]).remove();e.DOM.event.subscriptions.length&&e.DOM.event.subscriptions.forEach(e=>{e.token&&(n.eventbus.remove(e.token),delete e.token)}),e.parentNode&&e.parentNode.removeChild(e)})},t.replace=(e,t)=>{e.parentNode&&e.parentNode.replaceChild(i.dom(t).element,e)},t.insertion={appendAfter:t.appendAfter,appendBefore:t.appendBefore,appendFirstChild:t.appendFirstChild,appendLastChild:t.appendLastChild,appendTo:t.appendTo,empty:t.empty,remove:t.remove,replace:t.replace}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(1),i=n(0),s=n(12),o=e=>e&&e.style,a=(e,t)=>{if(o(e))return i.isUndefined(t)?e.style.backgroundColor:void(e.style.backgroundColor=t)};var u;!function(e){e.height="height",e.width="width"}(u||(u={}));const l=(e,t,n,r="px")=>{if(o(e)&&i.isFunction(e.getBoundingClientRect)){if(i.isUndefined(n))return e.getBoundingClientRect()[t]||0;i.isFunction(n)&&(n=n(e.style[t])),i.isString(n)&&/%|px|em|rem/.test(n)?e.style[t]=n:e.style[t]=`${n}${r}`}};t.styles={background:async(e,{color:t,path:n,brightness:i=!1,position:u=""})=>{if(!o(e))return;const l=r.dom(e);if(n){const t=await s.img(n,i);if("ok"!==t.status)return!1;e.style.backgroundImage=`url("${t.path}")`,i&&(t.brightness&&t.brightness<120?l.attr("img_avg_brightness","dark"):l.attr("img_avg_brightness","light")),u&&(e.style.backgroundPosition=u)}return t&&a(e,t),!0},backgroundColour:a,colour:(e,t)=>{if(o(e))return i.isUndefined(t)?e.style.color:void(e.style.color=t)},height:(e,t,n="px")=>l(e,u.height,t,n),hide:e=>{o(e)&&(e.style.display="none")},show:(e,t="")=>{o(e)&&(e.style.display=t)},style:(e,t,n)=>{if(!o(e))return;let r=e.style[t];if(i.isUndefined(n))return r;i.isFunction(n)?e.style[t]=n(r):e.style[t]=n},width:(e,t,n="px")=>l(e,u.width,t,n)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.img=(e,t=!1)=>new Promise(n=>{const r=new Image;r.onerror=()=>n({path:e,img:null,status:"error",brightness:0,r:0,g:0,b:0,a:0}),r.onload=function(){const i=this;let s=0,o=0,a=0,u=0,l=0;if(t){const e=document.createElement("canvas");e.width=i.width,e.height=i.height;const t=e.getContext("2d");if(!t)return;t.drawImage(i,0,0);const n=t.getImageData(0,0,e.width,e.height).data;for(let e=0;e<n.length;e+=20)o+=n[e],a+=n[e+1],u+=n[e+2],l+=n[e+3];s=Math.floor((o+a+u)/3/(i.width*i.height)*5),o=Math.floor(o/(n.length/4)),a=Math.floor(a/(n.length/4)),u=Math.floor(u/(n.length/4)),l=Math.floor(l/(n.length/4))}n({path:e,img:r,status:"ok",brightness:s,r:o,g:a,b:u,a:l})},r.src=e})},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(0);t.viewport={scrollTop:(e,t)=>{r.isUndefined(t)||r.isUndefined(e.scrollTop)||(e.scrollTop=t)},scrollMore:(e,t)=>{r.isUndefined(t)||r.isUndefined(e.scrollTop)||(e.scrollTop=(e.scrollTop||0)+t)},getBounding:e=>r.isFunction(e.getBoundingClientRect)?e.getBoundingClientRect():DOMRectReadOnly.fromRect()}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(1),i=n(4),s=n(0);t.default={deselect:e=>{i.isOption(e)&&(e.selected=!1,e.parentNode&&i.isSelect(e.parentNode)&&(e.parentNode.focus(),e.parentNode.dispatchEvent(new Event("change"))))},formValues:e=>{const t=e.form?e.form:e;if(!(t instanceof HTMLInputElement))return;const n=s.makeSureItsAnArray(t).filter(e=>["INPUT","TEXTAREA","SELECT"].includes(e.tagName.toLowerCase())),r={form:t,all:{},input:{},select:{},textarea:{},submitID:t.id,submitValue:t.value,failedValidation:{}};return n.forEach(e=>{if(e.name){if(i.isDomElement(e)){const t=e.DOM.data.get("validate");s.isFunction(t)&&t()||(r.failedValidation[e.name]=e.value)}switch(r.all[e.name]=e.value,e.tagName){case"INPUT":r.input[e.name]=e.value;break;case"SELECT":r.select[e.name]=e.value;break;case"TEXTAREA":r.textarea[e.name]=e.value}}}),r},dflt:(e,t)=>{const n=r.dom(e);return s.isUndefined(t)?(t=n.data("default"),e.value=s.isFunction(t)?t():t||"",e.value):(n.data("default",t),e.value=s.isFunction(t)?t():t,e.value)},select:e=>{i.isOption(e)&&(e.selected=!0,e.parentNode&&i.isSelect(e.parentNode)&&(e.parentNode.focus(),e.parentNode.dispatchEvent(new Event("change"))))},updateSelect:(e,t)=>{if(!s.isFunction(e.add)||!t.options)return;let n;t.dflt&&(n=s.isFunction(t.dflt)?t.dflt():t.dflt,e.DOM.data.default=t.dflt),Object.keys(t.options).forEach(r=>{const i=document.createElement("option");i.text=String(t.options[r]),i.value=String(r),n===i.value&&(i.selected=!0),e.add(i,null)})},validate:(e,t)=>!s.isFunction(e.DOM.data.validate)||e.DOM.data.validate(e.value,t),value:(e,t)=>{if(s.isUndefined(t))return e.value;e.value=t}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(0);t.runFactory=e=>(function(...t){for(let n=0;n<this.list.length;n++)try{e(this.list[n],...t)}catch(e){console.error(e)}return this}),t.runAndReturnFactory=e=>(function(...t){let n=[];for(let r=0;r<this.list.length;r++)try{n.push(e(this.list[r],...t))}catch(e){console.error(e)}return 0===(n=r.clean(void 0,n)).length?this:1===n.length?n[0]:n})},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(17),i=n(1),s=n(18);t.create=(e={})=>{if(void 0===e.tag){for(let t in r.HTMLTag)if(void 0!==e[t]){switch(e.tag=t,e.tag){case"img":e.src=e[t];break;case"input":e.value=e[t];break;case"script":e.src=e[t];break;case"select":e.options=e[t];break;default:e.content=e[t]}delete e[t];break}e.tag=e.tag||"div"}e.tag=e.tag.toLowerCase();const t=document.createElement(e.tag),n=i.default(t);for(let t in e)s.setters[t]&&s.setters[t](n,e);return n.element}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e){e[e.a=0]="a",e[e.aside=1]="aside",e[e.b=2]="b",e[e.button=3]="button",e[e.details=4]="details",e[e.div=5]="div",e[e.em=6]="em",e[e.figcaption=7]="figcaption",e[e.figure=8]="figure",e[e.footer=9]="footer",e[e.form=10]="form",e[e.h1=11]="h1",e[e.h2=12]="h2",e[e.h3=13]="h3",e[e.h4=14]="h4",e[e.h5=15]="h5",e[e.h6=16]="h6",e[e.header=17]="header",e[e.i=18]="i",e[e.img=19]="img",e[e.input=20]="input",e[e.main=21]="main",e[e.mark=22]="mark",e[e.nav=23]="nav",e[e.p=24]="p",e[e.pre=25]="pre",e[e.script=26]="script",e[e.select=27]="select",e[e.span=28]="span",e[e.summary=29]="summary",e[e.table=30]="table",e[e.tbody=31]="tbody",e[e.td=32]="td",e[e.textarea=33]="textarea",e[e.th=34]="th",e[e.thead=35]="thead",e[e.tr=36]="tr"}(t.HTMLTag||(t.HTMLTag={})),function(e){e[e.disabled=0]="disabled",e[e.height=1]="height",e[e.href=2]="href",e[e.htmlFor=3]="htmlFor",e[e.max=4]="max",e[e.min=5]="min",e[e.name=6]="name",e[e.placeholder=7]="placeholder",e[e.size=8]="size",e[e.src=9]="src",e[e.step=10]="step",e[e.target=11]="target",e[e.tooltip=12]="tooltip",e[e.type=13]="type",e[e.value=14]="value",e[e.width=15]="width"}(t.DomAttributeSetters||(t.DomAttributeSetters={})),function(e){e[e.attr=0]="attr",e[e.data=1]="data"}(t.DomObjectSetters||(t.DomObjectSetters={}))},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(0),i=n(1);t.set_attr_value=e=>(t,n)=>t.element[e]=n[e],t.set_kv_pairs=e=>(t,n)=>{const i=n[e];i&&Object.keys(i).forEach(n=>{r.isFunction(t[e])&&t[e](n,i[n])})},t.call_dom_fn=e=>(t,n)=>{t[e](n[e])},t.content=(e,t)=>{const n=r.makeSureItsAnArray(t.content);for(let t=0;t<n.length;t++){const s=n[t];r.isString(s)?e.element.appendChild(document.createTextNode(s)):s instanceof Node?e.element.appendChild(s):e.element.appendChild(i.default(s).element)}};const s=t.set_kv_pairs("attr"),o=t.call_dom_fn("background"),a=t.call_dom_fn("addClass"),u=t.set_kv_pairs("data"),l=t.call_dom_fn("dflt"),c=t.call_dom_fn("id"),d=t.set_attr_value("disabled"),f=t.set_attr_value("height"),p=t.set_attr_value("href"),y=t.set_attr_value("htmlFor"),b=t.set_attr_value("max"),v=t.set_attr_value("min"),_=t.set_attr_value("name"),m=t.set_attr_value("placeholder"),h=t.set_attr_value("size"),g=t.set_attr_value("src"),O=t.set_attr_value("step"),M=t.set_attr_value("target"),j=t.set_attr_value("tooltip"),P=t.set_attr_value("type"),A=t.set_attr_value("value"),F=t.set_attr_value("width");t.setters={attr:s,content:t.content,id:c,disabled:d,background:o,classes:a,data:u,dflt:l,height:f,href:p,htmlFor:y,max:b,min:v,name:_,on:(e,t)=>r.makeSureItsAnArray(t.onEvent).forEach(t=>e.onEvent(t)),options:(e,t)=>{e.element instanceof HTMLSelectElement&&e.updateSelect(t)},placeholder:m,size:h,src:g,step:O,style:(e,t)=>Object.assign(e.element.style,t.style),sub:(e,t)=>r.makeSureItsAnArray(t.sub).forEach(t=>e.sub(t)),target:M,tooltip:j,type:P,value:A,validate:(e,t)=>e.data("validate",t.validate),width:F}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,